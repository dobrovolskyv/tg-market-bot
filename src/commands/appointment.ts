import { CallbackQueryContext, InlineKeyboard } from "grammy";
import { MyContext } from "../types.js";

// @ts-ignore
import { pool } from "../database/index.js";


/** –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ chat_id */
const tempSessions = new Map()


/** –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" */
export const appointment = async (ctx: CallbackQueryContext<MyContext>) => {
    const keyboard = new InlineKeyboard()
        .text('üë®‚Äç‚öïÔ∏è Doctor 1', 'choose_doctor:doctor1')
        .text('üë©‚Äç‚öïÔ∏è Doctor 2', 'choose_doctor:doctor2')
        .text('üë®‚Äç‚öïÔ∏è Doctor 3', 'choose_doctor:doctor3');
    await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞", {
        reply_markup: keyboard
    })
}

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞ */
export const handleDoctor = async (ctx: CallbackQueryContext<MyContext>) => {
    if (!ctx.callbackQuery?.data) return;
    const doctor = ctx.callbackQuery.data.split(':')[1]
    const chatId = ctx.chat?.id ?? ctx.from.id
    tempSessions.set(chatId, { doctor })

    const keyboard = new InlineKeyboard()
        .text('15:00', 'choose_time:15:00')
        .text('16:00', 'choose_time:16:00')
        .text('17:00', 'choose_time:17:00');

    await ctx.answerCallbackQuery();
    await ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–∫—Ç–æ—Ä–∞${doctor}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:`, {
        reply_markup: keyboard
    })
}


/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ */
export const handleTime = async (ctx: CallbackQueryContext<MyContext>) => {
    const time = ctx.callbackQuery.data.split(':')[1] + ':00'
    const chatId = ctx.chat?.id ?? ctx.from.id
    const session = tempSessions.get(chatId)

    if (!session || !session.doctor) {
        return ctx.reply("–û—à–∏–±–∫–∞: –≤—Ä–∞—á –Ω–µ –≤—ã–±—Ä–∞–Ω")
    }

    // –ü–æ–ª—É—á–∞–µ–º user_id
    const [users] = await pool.query("SELECT id FROM users WHERE telegram_chat_id = ?", [chatId])
    if (!users.length) {
        return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    }

    const userId = users[0].id
    const date = new Date().toISOString().slice(0, 10)
    const appointmentTime = `${date} ${time}`

    try {
        await pool.query("INSERT INTO appointments (user_id, appointment_time, doctor, status) VALUES (?,?,?, 'new')", [userId, appointmentTime, session.doctor])

        await ctx.answerCallbackQuery();
        await ctx.editMessageText(`‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ ${session.doctor} –Ω–∞ ${time}\n–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`)

        const keyboard = new InlineKeyboard().text('–ù–∞–∑–∞–¥', 'backToMenu')

        await ctx.reply(`–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, {
            reply_markup: keyboard
        })

        tempSessions.delete(chatId)
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}
